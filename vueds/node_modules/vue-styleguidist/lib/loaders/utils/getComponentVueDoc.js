"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = getComponentVueDoc;

var fs = _interopRequireWildcard(require("fs"));

var path = _interopRequireWildcard(require("path"));

var _parseVue = _interopRequireDefault(require("./parseVue"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var readSeparateScriptFile = function readSeparateScriptFile(fileName) {
  return fs.readFileSync(fileName, {
    encoding: 'utf-8'
  });
};

function getComponentVueDoc(source, file) {
  var parts = (0, _parseVue["default"])(source, file);

  if (parts.customBlocks) {
    var docBlocks = parts.customBlocks.filter(function (block) {
      return block.type === 'docs';
    })[0];

    if (docBlocks && docBlocks.src) {
      var jsFilePath = path.join(path.dirname(file), docBlocks.src);
      return readSeparateScriptFile(jsFilePath);
    } else if (docBlocks && docBlocks.content) {
      return docBlocks.content;
    }
  }

  return false;
}